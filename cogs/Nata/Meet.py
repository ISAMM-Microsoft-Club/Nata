import asyncio
from dataclasses import dataclass
from datetime import datetime

import discord
from discord.ext import commands
from discord.utils import get


@dataclass
class Meet:
  bot : discord.Client
  ctx : commands.Context
  time : int
  link : str
  chef : int
  dept : str

  def __post_init__(self):
    self.date = datetime.date(datetime.now())
    if self.time == '0':
      self.deltaTime = 0
    else:
      self.deltaTime = (datetime.strptime(self.time, '%H:%M:%S') - datetime.strptime(datetime.now().strftime("%H:%M:%S"), '%H:%M:%S')).total_seconds()

  async def meet(self):
    await self.ctx.send(f"{self.dept} Department meeting scheduled on {self.date} at {self.time}. ( by {self.bot.chefs[str(self.chef)]} )")
    print(self.deltaTime)
    await asyncio.sleep(self.deltaTime)
    channel = self.bot.get_channel(992785842101813251)
    present__report = []
    present = []
    for member in channel.voice_states.keys():
      present.append(member)
      member = get(self.bot.get_all_members(), id=member)
      if member.nick:
        present__report.append(f"{member.nick}")
      else:
        present__report.append(f"{member.mention} (no nick!!!)")

    #! embeds
    embed = discord.Embed(title='Presence Check',
                          description=f'Report of the last {self.dept} Department meeting \n held on {self.date} at {self.time}',
                          colour=0x00ffff)
    embed.set_thumbnail(url="https://raw.githubusercontent.com/hammamikhairi/tests/main/logo.png?token=GHSAT0AAAAAABR6VEQ5BGEMEFBIPMU3EQCKYX765GQ")
    if len(present__report):
      embed.add_field(name='Present people', value='\n'.join(present__report), inline=False)
    else:
      embed.add_field(name='Present people', value='None', inline=False)
    embed.add_field(name="PV", value=f'[PV]({self.link})', inline=False)
    embed.set_footer(text=" \n( automatically generated by Nata )")
    await self.ctx.send(embed=embed)

    #TODO: push to api
